// Mocks generated by Mockito 5.4.5 from annotations
// in date_split_app/test/features/auth/presentation/auth_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:date_split_app/core/errors/failure.dart' as _i5;
import 'package:date_split_app/features/auth/data/models/user_model.dart'
    as _i6;
import 'package:date_split_app/features/auth/domain/repositories/auth_repository.dart'
    as _i3;
import 'package:date_split_app/features/auth/domain/usecases/delete_account.dart'
    as _i10;
import 'package:date_split_app/features/auth/domain/usecases/get_user.dart'
    as _i11;
import 'package:date_split_app/features/auth/domain/usecases/reset_password.dart'
    as _i9;
import 'package:date_split_app/features/auth/domain/usecases/signin.dart'
    as _i8;
import 'package:date_split_app/features/auth/domain/usecases/signup.dart'
    as _i7;
import 'package:date_split_app/features/auth/domain/usecases/update_user.dart'
    as _i12;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [AuthRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthRepository extends _i1.Mock implements _i3.AuthRepository {
  MockAuthRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, String>> signUp({
    required String? email,
    required String? password,
    required String? displayName,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#signUp, [], {
              #email: email,
              #password: password,
              #displayName: displayName,
            }),
            returnValue: _i4.Future<_i2.Either<_i5.Failure, String>>.value(
              _FakeEither_0<_i5.Failure, String>(
                this,
                Invocation.method(#signUp, [], {
                  #email: email,
                  #password: password,
                  #displayName: displayName,
                }),
              ),
            ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, String>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, String>> signIn({
    required String? email,
    required String? password,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#signIn, [], {
              #email: email,
              #password: password,
            }),
            returnValue: _i4.Future<_i2.Either<_i5.Failure, String>>.value(
              _FakeEither_0<_i5.Failure, String>(
                this,
                Invocation.method(#signIn, [], {
                  #email: email,
                  #password: password,
                }),
              ),
            ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, String>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, String>> updateUser({
    required String? token,
    required String? avatar,
    required String? nickName,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#updateUser, [], {
              #token: token,
              #avatar: avatar,
              #nickName: nickName,
            }),
            returnValue: _i4.Future<_i2.Either<_i5.Failure, String>>.value(
              _FakeEither_0<_i5.Failure, String>(
                this,
                Invocation.method(#updateUser, [], {
                  #token: token,
                  #avatar: avatar,
                  #nickName: nickName,
                }),
              ),
            ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, String>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, String>> resetPassword({
    required String? email,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#resetPassword, [], {#email: email}),
            returnValue: _i4.Future<_i2.Either<_i5.Failure, String>>.value(
              _FakeEither_0<_i5.Failure, String>(
                this,
                Invocation.method(#resetPassword, [], {#email: email}),
              ),
            ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, String>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, String>> deleteAccount({
    required String? uid,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#deleteAccount, [], {#uid: uid}),
            returnValue: _i4.Future<_i2.Either<_i5.Failure, String>>.value(
              _FakeEither_0<_i5.Failure, String>(
                this,
                Invocation.method(#deleteAccount, [], {#uid: uid}),
              ),
            ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, String>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.UserModel>> getUser() =>
      (super.noSuchMethod(
            Invocation.method(#getUser, []),
            returnValue:
                _i4.Future<_i2.Either<_i5.Failure, _i6.UserModel>>.value(
                  _FakeEither_0<_i5.Failure, _i6.UserModel>(
                    this,
                    Invocation.method(#getUser, []),
                  ),
                ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, _i6.UserModel>>);
}

/// A class which mocks [Signup].
///
/// See the documentation for Mockito's code generation for more information.
class MockSignup extends _i1.Mock implements _i7.Signup {
  MockSignup() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, String>> call(_i7.SignUpParams? params) =>
      (super.noSuchMethod(
            Invocation.method(#call, [params]),
            returnValue: _i4.Future<_i2.Either<_i5.Failure, String>>.value(
              _FakeEither_0<_i5.Failure, String>(
                this,
                Invocation.method(#call, [params]),
              ),
            ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, String>>);
}

/// A class which mocks [SignIn].
///
/// See the documentation for Mockito's code generation for more information.
class MockSignIn extends _i1.Mock implements _i8.SignIn {
  MockSignIn() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, String>> call(_i8.SignInParams? params) =>
      (super.noSuchMethod(
            Invocation.method(#call, [params]),
            returnValue: _i4.Future<_i2.Either<_i5.Failure, String>>.value(
              _FakeEither_0<_i5.Failure, String>(
                this,
                Invocation.method(#call, [params]),
              ),
            ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, String>>);
}

/// A class which mocks [ResetPassword].
///
/// See the documentation for Mockito's code generation for more information.
class MockResetPassword extends _i1.Mock implements _i9.ResetPassword {
  MockResetPassword() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, String>> call(String? params) =>
      (super.noSuchMethod(
            Invocation.method(#call, [params]),
            returnValue: _i4.Future<_i2.Either<_i5.Failure, String>>.value(
              _FakeEither_0<_i5.Failure, String>(
                this,
                Invocation.method(#call, [params]),
              ),
            ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, String>>);
}

/// A class which mocks [DeleteAccount].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeleteAccount extends _i1.Mock implements _i10.DeleteAccount {
  MockDeleteAccount() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, String>> call(String? params) =>
      (super.noSuchMethod(
            Invocation.method(#call, [params]),
            returnValue: _i4.Future<_i2.Either<_i5.Failure, String>>.value(
              _FakeEither_0<_i5.Failure, String>(
                this,
                Invocation.method(#call, [params]),
              ),
            ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, String>>);
}

/// A class which mocks [GetUser].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetUser extends _i1.Mock implements _i11.GetUser {
  MockGetUser() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.UserModel>> call() =>
      (super.noSuchMethod(
            Invocation.method(#call, []),
            returnValue:
                _i4.Future<_i2.Either<_i5.Failure, _i6.UserModel>>.value(
                  _FakeEither_0<_i5.Failure, _i6.UserModel>(
                    this,
                    Invocation.method(#call, []),
                  ),
                ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, _i6.UserModel>>);
}

/// A class which mocks [UpdateUser].
///
/// See the documentation for Mockito's code generation for more information.
class MockUpdateUser extends _i1.Mock implements _i12.UpdateUser {
  MockUpdateUser() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, String>> call(
    _i12.UpdateUserParams? params,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#call, [params]),
            returnValue: _i4.Future<_i2.Either<_i5.Failure, String>>.value(
              _FakeEither_0<_i5.Failure, String>(
                this,
                Invocation.method(#call, [params]),
              ),
            ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, String>>);
}
