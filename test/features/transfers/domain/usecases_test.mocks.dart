// Mocks generated by Mockito 5.4.5 from annotations
// in date_split_app/test/features/transfers/domain/usecases_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:date_split_app/core/errors/failure.dart' as _i5;
import 'package:date_split_app/features/transfers/domain/entities/transfer.dart'
    as _i6;
import 'package:date_split_app/features/transfers/domain/repositories/transfer_repository.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [TransferRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockTransferRepository extends _i1.Mock
    implements _i3.TransferRepository {
  MockTransferRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, void>> createTransfer(
    _i6.Transfer? transfer,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#createTransfer, [transfer]),
            returnValue: _i4.Future<_i2.Either<_i5.Failure, void>>.value(
              _FakeEither_0<_i5.Failure, void>(
                this,
                Invocation.method(#createTransfer, [transfer]),
              ),
            ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, void>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.Transfer>> getTransferById(
    String? id,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getTransferById, [id]),
            returnValue:
                _i4.Future<_i2.Either<_i5.Failure, _i6.Transfer>>.value(
                  _FakeEither_0<_i5.Failure, _i6.Transfer>(
                    this,
                    Invocation.method(#getTransferById, [id]),
                  ),
                ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, _i6.Transfer>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.Transfer>>> getAllTransfers(
    String? userId,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getAllTransfers, [userId]),
            returnValue:
                _i4.Future<_i2.Either<_i5.Failure, List<_i6.Transfer>>>.value(
                  _FakeEither_0<_i5.Failure, List<_i6.Transfer>>(
                    this,
                    Invocation.method(#getAllTransfers, [userId]),
                  ),
                ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, List<_i6.Transfer>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, void>> updateTransfer(
    String? id,
    _i6.Transfer? transfer,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#updateTransfer, [id, transfer]),
            returnValue: _i4.Future<_i2.Either<_i5.Failure, void>>.value(
              _FakeEither_0<_i5.Failure, void>(
                this,
                Invocation.method(#updateTransfer, [id, transfer]),
              ),
            ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, void>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, void>> deleteTransfer(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#deleteTransfer, [id]),
            returnValue: _i4.Future<_i2.Either<_i5.Failure, void>>.value(
              _FakeEither_0<_i5.Failure, void>(
                this,
                Invocation.method(#deleteTransfer, [id]),
              ),
            ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, void>>);
}
